"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/listing/[id]/page",{

/***/ "(app-pages-browser)/./hooks/useChatSocket.ts":
/*!********************************!*\
  !*** ./hooks/useChatSocket.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChatSocket: () => (/* binding */ useChatSocket)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sockjs_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sockjs-client */ \"(app-pages-browser)/../../node_modules/sockjs-client/lib/entry.js\");\n/* harmony import */ var sockjs_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sockjs_client__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _stomp_stompjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stomp/stompjs */ \"(app-pages-browser)/../../node_modules/@stomp/stompjs/esm6/client.js\");\n\n\n\n// Global connection manager to prevent multiple connections per user\nconst connectionManager = new Map();\n// Message deduplication set to prevent processing the same message multiple times\nconst processedMessages = new Set();\nfunction useChatSocket(userId, onMessage, onConnect, onDisconnect) {\n    const clientRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [connectionState, setConnectionState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"disconnected\");\n    const reconnectTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const connectionAttemptsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const maxReconnectAttempts = 3;\n    const reconnectDelay = 3000;\n    const isInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const onMessageRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onMessage);\n    const onConnectRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onConnect);\n    const onDisconnectRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDisconnect);\n    const isConnectingRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Update refs when callbacks change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useChatSocket.useEffect\": ()=>{\n            onMessageRef.current = onMessage;\n        }\n    }[\"useChatSocket.useEffect\"], [\n        onMessage\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useChatSocket.useEffect\": ()=>{\n            onConnectRef.current = onConnect;\n        }\n    }[\"useChatSocket.useEffect\"], [\n        onConnect\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useChatSocket.useEffect\": ()=>{\n            onDisconnectRef.current = onDisconnect;\n        }\n    }[\"useChatSocket.useEffect\"], [\n        onDisconnect\n    ]);\n    const cleanup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChatSocket.useCallback[cleanup]\": ()=>{\n            if (reconnectTimeoutRef.current) {\n                clearTimeout(reconnectTimeoutRef.current);\n                reconnectTimeoutRef.current = null;\n            }\n        }\n    }[\"useChatSocket.useCallback[cleanup]\"], []);\n    const connect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChatSocket.useCallback[connect]\": ()=>{\n            if (!userId || isConnectingRef.current) return;\n            // Check if there's already a connection for this user\n            const existingClient = connectionManager.get(userId);\n            if (existingClient && existingClient.connected) {\n                var _onConnectRef_current;\n                console.log(\"üîå Using existing WebSocket connection for user:\", userId);\n                clientRef.current = existingClient;\n                setConnectionState(\"connected\");\n                (_onConnectRef_current = onConnectRef.current) === null || _onConnectRef_current === void 0 ? void 0 : _onConnectRef_current.call(onConnectRef);\n                return;\n            }\n            // Clean up any existing connection\n            if (existingClient) {\n                try {\n                    existingClient.deactivate();\n                } catch (error) {\n                    console.warn(\"Error deactivating existing client:\", error);\n                }\n                connectionManager.delete(userId);\n            }\n            cleanup();\n            connectionAttemptsRef.current = 0;\n            isConnectingRef.current = true;\n            console.log(\"üîå Initializing new WebSocket connection for user:\", userId);\n            setConnectionState(\"connecting\");\n            try {\n                const socket = new (sockjs_client__WEBPACK_IMPORTED_MODULE_1___default())(\"http://localhost:8081/ws\");\n                const client = new _stomp_stompjs__WEBPACK_IMPORTED_MODULE_2__.Client({\n                    webSocketFactory: {\n                        \"useChatSocket.useCallback[connect]\": ()=>socket\n                    }[\"useChatSocket.useCallback[connect]\"],\n                    reconnectDelay: 0,\n                    heartbeatIncoming: 4000,\n                    heartbeatOutgoing: 4000,\n                    onConnect: {\n                        \"useChatSocket.useCallback[connect]\": ()=>{\n                            var _onConnectRef_current;\n                            console.log(\"‚úÖ WebSocket connected successfully for user:\", userId);\n                            connectionAttemptsRef.current = 0;\n                            isConnectingRef.current = false;\n                            setConnectionState(\"connected\");\n                            // Store the client in the global manager\n                            connectionManager.set(userId, client);\n                            clientRef.current = client;\n                            // Subscribe to user-specific private messages\n                            // This ensures only messages intended for this user are received\n                            client.subscribe(\"/user/\".concat(userId, \"/queue/messages\"), {\n                                \"useChatSocket.useCallback[connect]\": (message)=>{\n                                    try {\n                                        console.log(\"üì® Received private message for user\", userId, \":\", message.body);\n                                        const body = JSON.parse(message.body);\n                                        console.log(\"üì® Parsed private message:\", body);\n                                        // Only process if it's a chat message (not join message)\n                                        if (body.content && body.content !== \"joined\") {\n                                            // Create a unique key for message deduplication\n                                            const messageKey = \"\".concat(body.id || body.timestamp || Date.now(), \"_\").concat(body.senderId, \"_\").concat(body.content);\n                                            if (processedMessages.has(messageKey)) {\n                                                console.log(\"üì® Skipping duplicate message:\", messageKey);\n                                                return;\n                                            }\n                                            processedMessages.add(messageKey);\n                                            // Clean up old messages from the set (keep only last 100)\n                                            if (processedMessages.size > 100) {\n                                                const messagesArray = Array.from(processedMessages);\n                                                processedMessages.clear();\n                                                messagesArray.slice(-50).forEach({\n                                                    \"useChatSocket.useCallback[connect]\": (msg)=>processedMessages.add(msg)\n                                                }[\"useChatSocket.useCallback[connect]\"]);\n                                            }\n                                            console.log(\"üì® Processing private message\");\n                                            onMessageRef.current(body);\n                                        } else {\n                                            console.log(\"üì® Ignoring join message\");\n                                        }\n                                    } catch (error) {\n                                        console.error(\"‚ùå Error parsing private message:\", error);\n                                    }\n                                }\n                            }[\"useChatSocket.useCallback[connect]\"]);\n                            // Send join message only once per connection\n                            const joinMessage = {\n                                senderId: userId,\n                                senderName: userId,\n                                content: \"joined\",\n                                receiverId: \"\",\n                                listingId: \"\"\n                            };\n                            console.log(\"üëã Sending join message:\", joinMessage);\n                            client.publish({\n                                destination: \"/app/chat.join\",\n                                body: JSON.stringify(joinMessage)\n                            });\n                            (_onConnectRef_current = onConnectRef.current) === null || _onConnectRef_current === void 0 ? void 0 : _onConnectRef_current.call(onConnectRef);\n                        }\n                    }[\"useChatSocket.useCallback[connect]\"],\n                    onDisconnect: {\n                        \"useChatSocket.useCallback[connect]\": ()=>{\n                            var _onDisconnectRef_current;\n                            console.log(\"‚ùå WebSocket disconnected for user:\", userId);\n                            isConnectingRef.current = false;\n                            setConnectionState(\"disconnected\");\n                            // Remove from global manager\n                            connectionManager.delete(userId);\n                            clientRef.current = null;\n                            (_onDisconnectRef_current = onDisconnectRef.current) === null || _onDisconnectRef_current === void 0 ? void 0 : _onDisconnectRef_current.call(onDisconnectRef);\n                            // Attempt to reconnect if we haven't exceeded max attempts\n                            if (connectionAttemptsRef.current < maxReconnectAttempts) {\n                                connectionAttemptsRef.current++;\n                                console.log(\"\\uD83D\\uDD04 Reconnection attempt \".concat(connectionAttemptsRef.current, \"/\").concat(maxReconnectAttempts, \" for user:\"), userId);\n                                reconnectTimeoutRef.current = setTimeout({\n                                    \"useChatSocket.useCallback[connect]\": ()=>{\n                                        if (isInitializedRef.current) {\n                                            connect();\n                                        }\n                                    }\n                                }[\"useChatSocket.useCallback[connect]\"], reconnectDelay);\n                            } else {\n                                console.error(\"‚ùå Max reconnection attempts reached for user:\", userId);\n                                setConnectionState(\"error\");\n                            }\n                        }\n                    }[\"useChatSocket.useCallback[connect]\"],\n                    onStompError: {\n                        \"useChatSocket.useCallback[connect]\": (error)=>{\n                            console.error(\"‚ùå STOMP error for user\", userId, \":\", error);\n                            isConnectingRef.current = false;\n                            setConnectionState(\"error\");\n                        }\n                    }[\"useChatSocket.useCallback[connect]\"],\n                    onWebSocketError: {\n                        \"useChatSocket.useCallback[connect]\": (error)=>{\n                            console.error(\"‚ùå WebSocket error for user\", userId, \":\", error);\n                            isConnectingRef.current = false;\n                            setConnectionState(\"error\");\n                        }\n                    }[\"useChatSocket.useCallback[connect]\"],\n                    onWebSocketClose: {\n                        \"useChatSocket.useCallback[connect]\": ()=>{\n                            console.log(\"‚ùå WebSocket connection closed for user:\", userId);\n                            isConnectingRef.current = false;\n                            setConnectionState(\"disconnected\");\n                        }\n                    }[\"useChatSocket.useCallback[connect]\"]\n                });\n                client.activate();\n            } catch (error) {\n                console.error(\"‚ùå Error creating WebSocket connection for user\", userId, \":\", error);\n                isConnectingRef.current = false;\n                setConnectionState(\"error\");\n            }\n        }\n    }[\"useChatSocket.useCallback[connect]\"], [\n        userId,\n        cleanup\n    ]);\n    // Initialize connection when userId changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useChatSocket.useEffect\": ()=>{\n            if (userId) {\n                isInitializedRef.current = true;\n                connect();\n            } else {\n                cleanup();\n                isInitializedRef.current = false;\n                setConnectionState(\"disconnected\");\n            }\n            return ({\n                \"useChatSocket.useEffect\": ()=>{\n                    cleanup();\n                    isInitializedRef.current = false;\n                }\n            })[\"useChatSocket.useEffect\"];\n        }\n    }[\"useChatSocket.useEffect\"], [\n        userId,\n        connect,\n        cleanup\n    ]);\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChatSocket.useCallback[sendMessage]\": (msg)=>{\n            if (connectionState !== \"connected\" || !clientRef.current) {\n                console.error(\"‚ùå Cannot send message: not connected. State:\", connectionState);\n                return false;\n            }\n            try {\n                console.log(\"üì§ Sending private message via WebSocket:\", msg);\n                clientRef.current.publish({\n                    destination: \"/app/chat.private\",\n                    body: JSON.stringify(msg)\n                });\n                console.log(\"‚úÖ Private message sent successfully via WebSocket\");\n                return true;\n            } catch (error) {\n                console.error(\"‚ùå Error sending private message via WebSocket:\", error);\n                return false;\n            }\n        }\n    }[\"useChatSocket.useCallback[sendMessage]\"], [\n        connectionState\n    ]);\n    const isConnected = connectionState === \"connected\";\n    const isConnecting = connectionState === \"connecting\";\n    const hasError = connectionState === \"error\";\n    return {\n        sendMessage,\n        isConnected,\n        isConnecting,\n        hasError,\n        connectionStatus: connectionState,\n        reconnect: ()=>{\n            console.log(\"üîÑ Manual reconnect requested for user:\", userId);\n            connectionAttemptsRef.current = 0;\n            isInitializedRef.current = false;\n            isConnectingRef.current = false;\n            // Clean up existing connection\n            const existingClient = connectionManager.get(userId);\n            if (existingClient) {\n                try {\n                    existingClient.deactivate();\n                } catch (error) {\n                    console.warn(\"Error deactivating client during manual reconnect:\", error);\n                }\n                connectionManager.delete(userId);\n            }\n            connect();\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useChatSocket.ts\n"));

/***/ })

});