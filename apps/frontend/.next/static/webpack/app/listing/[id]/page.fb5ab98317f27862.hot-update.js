"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/listing/[id]/page",{

/***/ "(app-pages-browser)/./src/contexts/ChatContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/ChatContext.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatProvider: () => (/* binding */ ChatProvider),\n/* harmony export */   useChat: () => (/* binding */ useChat)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var sockjs_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sockjs-client */ \"(app-pages-browser)/../../node_modules/sockjs-client/lib/entry.js\");\n/* harmony import */ var sockjs_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sockjs_client__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _stomp_stompjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stomp/stompjs */ \"(app-pages-browser)/../../node_modules/@stomp/stompjs/esm6/client.js\");\n/* __next_internal_client_entry_do_not_use__ ChatProvider,useChat auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst ChatContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\n// Global connection manager\nlet globalClient = null;\nlet globalConnectionState = \"disconnected\";\nlet messageListeners = new Set();\nlet processedMessages = new Set();\nfunction ChatProvider(param) {\n    let { children, userId } = param;\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [connectionState, setConnectionState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"disconnected\");\n    const reconnectTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const connectionAttemptsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const maxReconnectAttempts = 3;\n    const reconnectDelay = 3000;\n    const isConnectingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const updateConnectionState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[updateConnectionState]\": (newState)=>{\n            globalConnectionState = newState;\n            setConnectionState(newState);\n        }\n    }[\"ChatProvider.useCallback[updateConnectionState]\"], []);\n    const addMessageListener = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[addMessageListener]\": (listener)=>{\n            messageListeners.add(listener);\n            return ({\n                \"ChatProvider.useCallback[addMessageListener]\": ()=>{\n                    messageListeners.delete(listener);\n                }\n            })[\"ChatProvider.useCallback[addMessageListener]\"];\n        }\n    }[\"ChatProvider.useCallback[addMessageListener]\"], []);\n    const notifyMessageListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[notifyMessageListeners]\": (msg)=>{\n            messageListeners.forEach({\n                \"ChatProvider.useCallback[notifyMessageListeners]\": (listener)=>{\n                    try {\n                        listener(msg);\n                    } catch (error) {\n                        console.error(\"Error in message listener:\", error);\n                    }\n                }\n            }[\"ChatProvider.useCallback[notifyMessageListeners]\"]);\n        }\n    }[\"ChatProvider.useCallback[notifyMessageListeners]\"], []);\n    const connect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[connect]\": ()=>{\n            if (!userId || isConnectingRef.current) return;\n            // Check if there's already a global connection\n            if (globalClient && globalClient.connected) {\n                console.log(\"🔌 Using existing global WebSocket connection for user:\", userId);\n                updateConnectionState(\"connected\");\n                return;\n            }\n            // Clean up any existing connection\n            if (globalClient) {\n                try {\n                    globalClient.deactivate();\n                } catch (error) {\n                    console.warn(\"Error deactivating existing global client:\", error);\n                }\n                globalClient = null;\n            }\n            if (reconnectTimeoutRef.current) {\n                clearTimeout(reconnectTimeoutRef.current);\n                reconnectTimeoutRef.current = null;\n            }\n            connectionAttemptsRef.current = 0;\n            isConnectingRef.current = true;\n            console.log(\"🔌 Initializing global WebSocket connection for user:\", userId);\n            updateConnectionState(\"connecting\");\n            try {\n                const socket = new (sockjs_client__WEBPACK_IMPORTED_MODULE_2___default())(\"http://localhost:8081/ws\");\n                const client = new _stomp_stompjs__WEBPACK_IMPORTED_MODULE_3__.Client({\n                    webSocketFactory: {\n                        \"ChatProvider.useCallback[connect]\": ()=>socket\n                    }[\"ChatProvider.useCallback[connect]\"],\n                    reconnectDelay: 0,\n                    heartbeatIncoming: 4000,\n                    heartbeatOutgoing: 4000,\n                    onConnect: {\n                        \"ChatProvider.useCallback[connect]\": ()=>{\n                            console.log(\"✅ Global WebSocket connected successfully for user:\", userId);\n                            connectionAttemptsRef.current = 0;\n                            isConnectingRef.current = false;\n                            updateConnectionState(\"connected\");\n                            globalClient = client;\n                            // Subscribe to all conversation topics (for now, we'll listen to all)\n                            // In a real app, you'd subscribe only to conversations the user is part of\n                            client.subscribe(\"/topic/conversation/#\", {\n                                \"ChatProvider.useCallback[connect]\": (message)=>{\n                                    try {\n                                        console.log(\"📨 Received conversation message:\", message.body);\n                                        const body = JSON.parse(message.body);\n                                        console.log(\"📨 Parsed conversation message:\", body);\n                                        // Process all messages except system join messages\n                                        if (body.content && body.content !== \"joined\") {\n                                            // Create a unique key for message deduplication\n                                            const messageKey = \"\".concat(body.id || body.timestamp || Date.now(), \"_\").concat(body.senderId, \"_\").concat(body.content);\n                                            if (processedMessages.has(messageKey)) {\n                                                console.log(\"📨 Skipping duplicate message:\", messageKey);\n                                                return;\n                                            }\n                                            processedMessages.add(messageKey);\n                                            // Clean up old messages from the set (keep only last 100)\n                                            if (processedMessages.size > 100) {\n                                                const messagesArray = Array.from(processedMessages);\n                                                processedMessages.clear();\n                                                messagesArray.slice(-50).forEach({\n                                                    \"ChatProvider.useCallback[connect]\": (msg)=>processedMessages.add(msg)\n                                                }[\"ChatProvider.useCallback[connect]\"]);\n                                            }\n                                            console.log(\"📨 Processing conversation message for user:\", userId, \"Message:\", body);\n                                            // Only add to local messages if this user is part of the conversation\n                                            // (either sender or receiver)\n                                            if (body.senderId === userId || body.receiverId === userId) {\n                                                console.log(\"📨 Adding message to local state for user:\", userId);\n                                                setMessages({\n                                                    \"ChatProvider.useCallback[connect]\": (prev)=>[\n                                                            ...prev,\n                                                            body\n                                                        ]\n                                                }[\"ChatProvider.useCallback[connect]\"]);\n                                                notifyMessageListeners(body);\n                                            } else {\n                                                console.log(\"📨 Message not for this user. Sender:\", body.senderId, \"Receiver:\", body.receiverId, \"Current user:\", userId);\n                                            }\n                                        } else {\n                                            console.log(\"📨 Ignoring join message\");\n                                        }\n                                    } catch (error) {\n                                        console.error(\"❌ Error parsing conversation message:\", error);\n                                    }\n                                }\n                            }[\"ChatProvider.useCallback[connect]\"]);\n                            // Send join message only once per connection\n                            const joinMessage = {\n                                senderId: userId,\n                                senderName: userId,\n                                content: \"joined\",\n                                receiverId: \"\",\n                                listingId: \"\"\n                            };\n                            console.log(\"👋 Sending join message:\", joinMessage);\n                            client.publish({\n                                destination: \"/app/chat.join\",\n                                body: JSON.stringify(joinMessage)\n                            });\n                        }\n                    }[\"ChatProvider.useCallback[connect]\"],\n                    onDisconnect: {\n                        \"ChatProvider.useCallback[connect]\": ()=>{\n                            console.log(\"❌ Global WebSocket disconnected for user:\", userId);\n                            isConnectingRef.current = false;\n                            updateConnectionState(\"disconnected\");\n                            globalClient = null;\n                            // Attempt to reconnect if we haven't exceeded max attempts\n                            if (connectionAttemptsRef.current < maxReconnectAttempts) {\n                                connectionAttemptsRef.current++;\n                                console.log(\"\\uD83D\\uDD04 Reconnection attempt \".concat(connectionAttemptsRef.current, \"/\").concat(maxReconnectAttempts, \" for user:\"), userId);\n                                reconnectTimeoutRef.current = setTimeout({\n                                    \"ChatProvider.useCallback[connect]\": ()=>{\n                                        connect();\n                                    }\n                                }[\"ChatProvider.useCallback[connect]\"], reconnectDelay);\n                            } else {\n                                console.error(\"❌ Max reconnection attempts reached for user:\", userId);\n                                updateConnectionState(\"error\");\n                            }\n                        }\n                    }[\"ChatProvider.useCallback[connect]\"],\n                    onStompError: {\n                        \"ChatProvider.useCallback[connect]\": (error)=>{\n                            console.error(\"❌ STOMP error for user\", userId, \":\", error);\n                            isConnectingRef.current = false;\n                            updateConnectionState(\"error\");\n                        }\n                    }[\"ChatProvider.useCallback[connect]\"],\n                    onWebSocketError: {\n                        \"ChatProvider.useCallback[connect]\": (error)=>{\n                            console.error(\"❌ WebSocket error for user\", userId, \":\", error);\n                            isConnectingRef.current = false;\n                            updateConnectionState(\"error\");\n                        }\n                    }[\"ChatProvider.useCallback[connect]\"],\n                    onWebSocketClose: {\n                        \"ChatProvider.useCallback[connect]\": ()=>{\n                            console.log(\"❌ Global WebSocket connection closed for user:\", userId);\n                            isConnectingRef.current = false;\n                            updateConnectionState(\"disconnected\");\n                        }\n                    }[\"ChatProvider.useCallback[connect]\"]\n                });\n                client.activate();\n            } catch (error) {\n                console.error(\"❌ Error creating global WebSocket connection for user\", userId, \":\", error);\n                isConnectingRef.current = false;\n                updateConnectionState(\"error\");\n            }\n        }\n    }[\"ChatProvider.useCallback[connect]\"], [\n        userId,\n        updateConnectionState,\n        notifyMessageListeners\n    ]);\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[sendMessage]\": (msg)=>{\n            if (connectionState !== \"connected\" || !globalClient) {\n                console.error(\"❌ Cannot send message: not connected. State:\", connectionState);\n                return false;\n            }\n            try {\n                console.log(\"📤 Sending private message via global WebSocket:\", msg);\n                globalClient.publish({\n                    destination: \"/app/chat.private\",\n                    body: JSON.stringify(msg)\n                });\n                console.log(\"✅ Private message sent successfully via global WebSocket\");\n                return true;\n            } catch (error) {\n                console.error(\"❌ Error sending private message via global WebSocket:\", error);\n                return false;\n            }\n        }\n    }[\"ChatProvider.useCallback[sendMessage]\"], [\n        connectionState\n    ]);\n    const reconnect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[reconnect]\": ()=>{\n            console.log(\"🔄 Manual reconnect requested for user:\", userId);\n            connectionAttemptsRef.current = 0;\n            isConnectingRef.current = false;\n            // Clean up existing connection\n            if (globalClient) {\n                try {\n                    globalClient.deactivate();\n                } catch (error) {\n                    console.warn(\"Error deactivating global client during manual reconnect:\", error);\n                }\n                globalClient = null;\n            }\n            if (reconnectTimeoutRef.current) {\n                clearTimeout(reconnectTimeoutRef.current);\n                reconnectTimeoutRef.current = null;\n            }\n            connect();\n        }\n    }[\"ChatProvider.useCallback[reconnect]\"], [\n        userId,\n        connect\n    ]);\n    // Initialize connection when userId changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatProvider.useEffect\": ()=>{\n            if (userId) {\n                connect();\n            } else {\n                updateConnectionState(\"disconnected\");\n            }\n            return ({\n                \"ChatProvider.useEffect\": ()=>{\n                    if (reconnectTimeoutRef.current) {\n                        clearTimeout(reconnectTimeoutRef.current);\n                    }\n                }\n            })[\"ChatProvider.useEffect\"];\n        }\n    }[\"ChatProvider.useEffect\"], [\n        userId,\n        connect,\n        updateConnectionState\n    ]);\n    const isConnected = connectionState === \"connected\";\n    const isConnecting = connectionState === \"connecting\";\n    const hasError = connectionState === \"error\";\n    const contextValue = {\n        messages,\n        sendMessage,\n        isConnected,\n        isConnecting,\n        hasError,\n        connectionStatus: connectionState,\n        reconnect,\n        addMessageListener\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChatContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/nihal/Desktop/Nihal/Projects/listri/apps/frontend/src/contexts/ChatContext.tsx\",\n        lineNumber: 297,\n        columnNumber: 5\n    }, this);\n}\n_s(ChatProvider, \"4oKLfQnyD9prkbVAW9bL6EmZx5Q=\");\n_c = ChatProvider;\nfunction useChat() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChatContext);\n    if (!context) {\n        throw new Error(\"useChat must be used within a ChatProvider\");\n    }\n    return context;\n}\n_s1(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/ChatContext.tsx\n"));

/***/ })

});